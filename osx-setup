#!/bin/bash
BGreen='\e[1;32m'       # Green
BRed='\e[1;31m'         # Red
Color_Off='\e[0m'       # Text Reset

function setStatusMessage {
    printf "${IRed} --> ${BGreen}$1${Color_Off}\n" 1>&2
}

function triggerError {
    printf "${BRed} --> $1 ${Color_Off}\n" 1>&2
    exit 1
}

# Check whether a command exists - returns 0 if it does, 1 if it does not
function exists {
  if command -v $1 >/dev/null 2>&1
  then
    return 0
  else
    return 1
  fi
}

# credits https://github.com/boxcutter/osx/blob/master/script/xcode-cli-tools.sh
function install_clt {
    # Get and install Xcode CLI tools
    OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

    # on 10.9+, we can leverage SUS to get the latest CLI tools
    if [ "$OSX_VERS" -ge 9 ]; then
        # create the placeholder file that's checked by CLI updates' .dist code
        # in Apple's SUS catalog
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
        # find the CLI Tools update
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | head -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
        # install it
        softwareupdate -i "$PROD"
        rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # on 10.7/10.8, we instead download from public download URLs, which can be found in
    # the dvtdownloadableindex:
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    else
        [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
        [ "$OSX_VERS" -eq 7 ] && ALLOW_UNTRUSTED=-allowUntrusted
        [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg

        TOOLS=clitools.dmg
        curl "$DMGURL" -o "$TOOLS"
        TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
        hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
        installer $ALLOW_UNTRUSTED -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
        hdiutil detach "$TMPMOUNT"
        rm -rf "$TMPMOUNT"
        rm "$TOOLS"
        exit
    fi
}

printf "${BGreen}                                               __                ${Color_Off}\n"
printf "${BGreen}   ____  _________  ___           ______ _____/  |_ __ ________  ${Color_Off}\n"
printf "${BGreen}  /  _ \/  ___/\  \/  /  ______  /  ___// __ \   __\  |  \____ \ ${Color_Off}\n"
printf "${BGreen} (  <_> )___ \  >    <  /_____/  \___ \\  ___/|  | |  |  /  |_> >${Color_Off}\n"
printf "${BGreen}  \____/____  >/__/\_ \         /____  >\___  >__| |____/|   __/ ${Color_Off}\n"
printf "${BGreen}            \/       \/              \/     \/           |__|    ${Color_Off}\n"
printf "${BGreen}                                                                 ${Color_Off}\n\n"

setStatusMessage "Checking if we need to ask for a sudo password"

sudo -v
export ANSIBLE_ASK_SUDO_PASS=True

setStatusMessage "Keep-alive: update existing sudo time stamp until we are finished"

while true; do sudo -n true; sleep 30; kill -0 "$$" || exit; done 2>/dev/null &

if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    setStatusMessage "Install the CLT"
    install_clt
fi

# Install Ansible
if ! exists pip; then
    setStatusMessage "Install PIP"
    sudo easy_install --quiet pip
fi

pip install --user --upgrade setuptools

if ! exists ansible; then
    setStatusMessage "Install Ansible"
    sudo pip install -q ansible
    setStatusMessage "Overwrite osx_defaults module from repo"
    sudo rm /Library/Python/2.7/site-packages/ansible/modules/extras/system/osx_defaults.py*
    sudo curl -so /Library/Python/2.7/site-packages/ansible/modules/extras/system/osx_defaults.py https://raw.githubusercontent.com/ansible/ansible-modules-extras/stable-2.1/system/osx_defaults.py
fi

setStatusMessage "Create necessary folders"

sudo chmod -R g+rwx /usr/local
sudo chgrp -R admin /usr/local

if [ -d "/usr/local/osx-setup" ]; then
    setStatusMessage "Update your config from git"
    cd /usr/local/osx-setup
    git pull -q
else
    setStatusMessage "Getting the default config"
    git clone -q https://github.com/waynz0r/osx-setup.git /usr/local/osx-setup
fi

cd /usr/local/osx-setup

setStatusMessage "Create ansible.cfg"

{ echo '[defaults]'; echo 'roles_path=/usr/local/osx-setup/roles'; } > ansible.cfg

setStatusMessage "Running the ansible playbook"
ansible-playbook -vv --skip-tags=atom -i "localhost," setup.yml
